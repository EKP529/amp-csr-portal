// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Customer {
    id            String         @id @default(cuid())
    name          String
    email         String         @unique
    phone         String?        @unique
    address       String?        @unique
    birthdate     DateTime       @db.Date
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    purchases     Purchase[]
    subscriptions Subscription[]
    vehicles      Vehicle[]
}

model Purchase {
    id           String   @id @default(cuid())
    customerId   String
    productId    String
    productName  String
    quantity     Int
    totalPrice   Float
    purchaseDate DateTime @default(now())
    customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    product      Product  @relation(fields: [productId, productName], references: [id, name])
}

model Product {
    id          String     @id @default(cuid())
    name        String
    description String?
    price       Float
    purchases   Purchase[]
    @@unique([id, name])
}

model Vehicle {
    id             String        @id @default(cuid())
    customerId     String
    subscriptionId String?
    make           String
    model          String
    year           Int
    vin            String        @unique
    licensePlate   String        @unique
    color          String
    subscription   Subscription?
    Customer       Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

enum Status {
    ACTIVE
    CANCELED
    EXPIRED
}

model Subscription {
    id              String    @id @default(cuid())
    customerId      String
    vehicleId       String    @unique
    plan            String
    startDate       DateTime  @default(now())
    endDate         DateTime?
    nextBillingDate DateTime?
    status          Status    @default(ACTIVE)
    customer        Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
    vehicle         Vehicle   @relation(fields: [vehicleId], references: [id])
}
